.. module:: data_as_code
    :noindex:

Tutorial
========

This document provides a high-level overview of how to use this package. This
guide will cover:

 * :ref:`recipe`
 * :ref:`step`
 * :ref:`package`
 * :ref:`execution`


.. _recipe:

Recipe
------

Every time you use this package, you will begin and end with a
:class:`Recipe`. The recipe acts as a container, which
isolates the package from your regular file-system, and isolates each step from
each other. This is accomplished through liberal use of temporary directories.
The isolation allows the recipe to handle the artifacts involved in each step in
an object-oriented fashion, improving reproducibility of the recipe.

.. note::
    The use of temporary directories means that everything generated by a recipe
    will be discarded at the end, unless otherwise indicated by the user in the
    ``keep`` parameter of the Recipe, or a specific Step.

The :class:`Recipe` is a class which expects one or more :class:`Step` classes
to be defined within it. Steps will be executed in the order that they are
defined, and the result of each step can be used as an ingredient for later
steps. The recipe organizes the results of each step in workspaces during
execution.

.. testcode::

    from data_as_code import Recipe, Step

    class MyRecipe(Recipe):
        class Step(Step):
            pass


.. note::
    The code above is invalid, since the step has no instructions defined.


.. _step:

Step
------

Once you've started your recipe, you need to include some steps to generate a
data product for the package. Steps can be broken into two main types:

    1. *Common*: methods which execute a pre-determined set of instructions
    using a set of parameters. These simplify common tasks such as downloading
    a file from the internet.

    2. *Custom*: sub-classes which are defined in the recipe, and allow for
    complete control over the instructions that are executed.

We'll start with a common step which downloads a file.
:meth:`common.source_http` uses the URL we provide to download
the html page, storing it inside a temporary working directory that is
established by our recipe.

.. testcode::

    from data_as_code import Recipe
    from data_as_code.common import source_http

    class DataAsCode(Recipe):
        download = source_http('https://en.wikipedia.org/wiki/Data')



Next, we'll make some modifications to the file we downloaded. This time we'll
need to use a custom :class:`Step`. We're going to modify
the text of our downloaded file, replacing all instances of the word "Data"
with "Code".

To create this custom step, we need to

 #. create a `subclass`_ of :class:`Step`
 #. define the previous step, `download`, as an :meth:`ingredient`
 #. define the :meth:`Step.instructions` (these instructions execute when your
    recipe is executed)

.. testcode::

    from data_as_code import Recipe, Step, ingredient, result
    from data_as_code.common import source_http

    class DataAsCode(Recipe):
        download = source_http('https://en.wikipedia.org/wiki/Data')

        class Swap(Step):
            x = ingredient('download')
            output = result('code.html')

            def instructions(self):
                txt = self.x.read_text().replace('data', 'code')
                self.output.write_text(txt)

.. note::
    The use of ``x`` is arbitrary. We could also name the ingredient ``y``, or
    ``data``.

Once we execute our recipe, these steps will generate a file named ``code.html``
with the full HTML contents of the wikipedia page on "Data", which each instance
of the work "code" replaced with the word "data".


.. _execution:

Execution
---------

The recipe can be executed by calling it via command line utility.

.. code-block:: console

    data_as_code execute my_recipe.py

.. note::
    The command line is the recommended method of executing a Recipe, as it
    provides for the most flexibility to the user at runtime to make
    configuration changes.

You can also call the :func:`~Recipe.execute` method on your recipe via another
python script, or from the the python console (assuming that you have are
appropriately handling the `module search path`_.

.. code-block:: python

    from recipe import MyRecipe

    MyRecipe().execute()

.. warning::
    It is discouraged to include a call to :func:`~Recipe.execute` in the python
    script containing your file, as this makes it impossible to import your
    recipe from a file without executing it. If you **must** call an
    execution from the same file where your recipe is defined, be sure to wrap
    it in a main check.

    .. code-block:: python

        if __name__ == '__main__':
            MyRecipe().execute()



.. _package:

Package
-------

.. code-block:: shell

    | data_package/
    |-- env/
        |-- requirements.txt
    |-- metadata/
        |-- data_as_code.html.json
    |-- data/
        |-- data_as_code.html
    |-- recipe.py


.. _module search path: https://docs.python.org/3/tutorial/modules.html#the-module-search-path
.. _subclass: https://docs.python.org/3/tutorial/classes.html#inheritance
